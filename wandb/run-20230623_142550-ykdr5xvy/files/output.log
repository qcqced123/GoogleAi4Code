Some weights of the model checkpoint at microsoft/deberta-v3-large were not used when initializing DebertaV2Model: ['mask_predictions.LayerNorm.weight', 'lm_predictions.lm_head.LayerNorm.weight', 'mask_predictions.classifier.bias', 'mask_predictions.dense.bias', 'mask_predictions.LayerNorm.bias', 'lm_predictions.lm_head.dense.weight', 'lm_predictions.lm_head.LayerNorm.bias', 'mask_predictions.classifier.weight', 'mask_predictions.dense.weight', 'lm_predictions.lm_head.dense.bias', 'lm_predictions.lm_head.bias']
- This IS expected if you are initializing DebertaV2Model from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing DebertaV2Model from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|                                                                                                            | 0/111421 [00:00<?, ?it/s]
[1/5] Train & Validation
torch.Size([1, 471, 1024])
torch.Size([1, 3, 1024])
tensor([[[-0.2350, -1.6272,  0.9223,  ...,  0.5027,  0.6222,  0.0521],
         [-0.7133, -1.8485,  0.4741,  ...,  0.3690,  0.7802, -0.0252],
         [-0.2642, -1.7627,  0.7017,  ..., -0.2588,  0.4345,  0.0259]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 6, 1024])
tensor([[[-0.2115, -1.6465,  0.1477,  ...,  0.3949,  0.0437,  0.3166],
         [ 0.2165, -1.4918, -0.0677,  ...,  0.2148,  0.6905,  0.1376],
         [ 0.5177, -0.6270,  0.1798,  ...,  0.0607,  0.2545,  0.4012],
         [-0.5605, -0.1498,  0.1940,  ...,  0.2541, -0.1715,  0.1889],
         [-0.0278, -2.2219,  0.2882,  ...,  0.9976,  0.1181, -0.1515],
         [-0.0341, -1.5645, -0.0893,  ..., -0.0493,  0.4766, -0.2692]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 7, 1024])
tensor([[[-0.5780, -1.0256,  0.3328,  ...,  0.0773, -0.2635, -0.2341],
         [-0.3221, -1.6710, -0.1103,  ...,  0.1858, -0.0559,  0.5208],
         [ 0.0773, -1.6327,  0.2851,  ...,  0.1204,  0.6646,  0.6643],
         ...,
         [-0.5380, -0.5140,  0.6101,  ...,  0.1391,  0.5746,  0.1001],
         [-0.3537, -0.7313,  0.1702,  ...,  0.0681, -0.0845,  1.0424],
         [ 0.3430, -1.7037,  0.5986,  ...,  0.3551,  0.1583, -0.3437]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 3, 1024])
tensor([[[-0.6191,  0.0560,  1.0015,  ...,  0.2298,  0.4462, -0.1956],
         [-0.1708,  0.0387,  0.6867,  ...,  0.2822,  0.3003, -0.1978],
         [-0.5330, -0.8162,  0.9110,  ...,  0.2357,  0.4595,  0.1396]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 6, 1024])
tensor([[[-0.4786, -0.2984,  0.2728,  ...,  0.0515,  0.0559,  0.1626],
         [-0.6008, -1.8924,  0.6728,  ..., -0.7327,  0.0894,  0.1235],
         [-1.0707, -0.0091, -0.1730,  ...,  0.1839,  0.2437,  0.2635],
         [-0.1829,  0.2588, -0.0869,  ..., -0.0821,  0.1017,  0.5256],
         [-0.1161, -0.9154,  0.1896,  ..., -0.1845,  0.1074, -0.1304],
         [-0.4898, -0.6836,  0.3080,  ..., -0.3688,  0.2692, -0.3652]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 4, 1024])
tensor([[[ 0.2993, -1.2367,  0.5128,  ...,  0.0538, -0.1664, -0.0884],
         [-0.6282, -1.1357, -0.4378,  ..., -0.0057, -0.0760,  0.2107],
         [-0.8339, -1.5133, -0.1048,  ...,  0.3035,  0.3606,  0.6560],
         [-0.4133, -0.5019,  0.2173,  ..., -0.2156,  0.7654,  0.1914]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 2, 1024])
tensor([[[-0.5222, -1.3484,  0.4974,  ..., -0.0705,  0.1455, -0.0235],
         [-0.5939, -0.7132,  0.6635,  ..., -0.1924,  0.1578,  0.0481]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 8, 1024])
tensor([[[-0.5350, -1.3171,  0.2922,  ...,  0.4881,  0.1043,  0.2210],
         [-0.3603, -0.4551,  0.3120,  ...,  0.4003,  0.3609,  0.6095],
         [-0.1147, -1.8689,  0.2840,  ..., -0.0570,  0.5487,  0.2702],
         ...,
         [-0.1281, -0.9262,  0.0616,  ...,  0.1398,  0.2525,  0.4128],
         [-0.5010, -0.6939, -0.0943,  ...,  0.4358,  0.2012, -0.0132],
         [ 0.1640, -1.8180,  0.1866,  ...,  0.3208,  0.3812,  0.5510]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 3, 1024])
tensor([[[-0.5756, -1.2890, -0.2266,  ...,  0.2278,  0.2635,  0.2878],
         [-1.1377, -0.8767, -0.6191,  ..., -0.0226,  0.2247,  0.2710],
         [ 0.1133, -0.6312,  0.0266,  ...,  0.1121, -0.2505,  0.2484]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 2, 1024])
tensor([[[-0.5680, -1.3713,  0.4437,  ..., -0.1597,  0.3941,  0.2496],
         [-0.5016, -1.1149,  0.0287,  ...,  0.3785,  0.0131,  0.3152]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 5, 1024])
tensor([[[-0.0360, -2.2753,  0.8765,  ..., -0.3616, -0.0098, -0.1159],
         [-0.3586, -1.7353,  0.1565,  ..., -0.1928,  0.4260,  0.3990],
         [-0.2300, -1.2915,  0.2039,  ...,  0.2905,  0.7415,  0.0290],
         [-0.6348, -1.9475, -0.0754,  ...,  0.2134,  0.4666,  0.7127],
         [ 0.1499, -0.6871,  0.0165,  ...,  0.4288,  0.3679,  0.5662]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 20, 1024])
tensor([[[ 0.2196, -1.5910,  0.5799,  ..., -0.0137,  0.3727, -0.1449],
         [-0.1234, -1.7736,  0.2121,  ..., -0.0583,  0.2164,  0.2179],
         [-0.2670, -0.6093, -0.0078,  ...,  0.4213,  0.6474,  0.4885],
         ...,
         [ 0.0062, -1.1696,  0.2372,  ...,  0.0941,  0.1063,  0.8392],
         [-0.1393, -2.5595,  0.5355,  ..., -0.0378,  0.1885, -0.0261],
         [ 0.4885, -2.2245,  0.6825,  ..., -0.3040,  0.6139,  0.1837]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 6, 1024])
tensor([[[-6.2845e-01, -2.0983e+00,  7.6809e-01,  ..., -8.0212e-02,
           3.7555e-02, -5.1663e-01],
         [-5.3497e-01, -2.6118e+00,  5.2525e-01,  ..., -1.2126e-01,
           5.7486e-01, -1.5293e-01],
         [ 3.4775e-01, -2.4753e+00,  7.1070e-01,  ..., -2.0269e-01,
           9.4094e-02,  1.6936e-01],
         [ 1.9121e-01, -2.4253e+00,  5.9292e-01,  ..., -3.4354e-01,
           5.9962e-01,  3.4750e-01],
         [-2.4805e-03, -2.3964e+00, -7.9745e-02,  ..., -3.6224e-01,
           8.7090e-02,  1.3465e-01],
         [-7.4311e-02, -2.8074e+00,  3.7396e-01,  ...,  1.5162e-01,
          -2.3729e-01,  1.8720e-01]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 7, 1024])
tensor([[[ 2.2627e-02, -1.2643e+00,  7.3330e-02,  ...,  2.7452e-01,
           1.2700e-01, -2.2690e-02],
         [ 4.6509e-01, -1.8166e+00,  7.4747e-01,  ...,  3.1599e-01,
           9.0115e-02,  3.2032e-01],
         [-3.5224e-03, -3.7080e+00,  7.0491e-01,  ..., -5.2813e-01,
           6.3951e-02, -2.9525e-01],
         ...,
         [-3.5236e-01, -1.3889e+00, -1.0732e-01,  ...,  5.7890e-01,
           4.4756e-01,  4.4403e-01],
         [ 2.0113e-01, -1.4077e+00, -3.8008e-01,  ...,  1.1022e-01,
           1.2893e-02, -4.6125e-01],
         [-2.5821e-01,  1.9328e+00,  3.1220e-01,  ..., -5.6124e-01,
          -6.6539e-02, -3.1331e-02]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 6, 1024])
tensor([[[-0.3167, -2.2686,  0.9230,  ...,  0.4359, -0.2899,  0.4082],
         [-0.2683, -2.5501,  0.2442,  ...,  0.1683,  0.6121,  0.5503],
         [-0.1590, -2.7324,  0.1008,  ..., -0.1779,  0.3065,  0.1023],
         [-0.6856, -2.1888,  0.3016,  ...,  0.2028,  0.3045,  0.3858],
         [-0.0312, -1.2103,  0.5386,  ...,  0.0231,  0.6033,  0.3732],
         [-0.1750, -0.7995,  0.2488,  ...,  0.2447, -0.0313,  0.4814]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 18, 1024])
tensor([[[-0.4171, -1.8840,  0.2490,  ..., -0.4893, -0.1125, -0.4278],
         [-0.3216, -1.7389,  0.3020,  ..., -0.2144,  0.2992, -0.3890],
         [-0.3882, -2.2111,  0.4602,  ..., -0.4099,  0.1212,  0.2067],
         ...,
         [ 0.0522, -1.8852,  0.3035,  ...,  0.2858, -0.0100, -0.2169],
         [-0.2225, -1.3599, -0.0501,  ...,  0.4283,  0.2417,  0.4968],
         [-0.3912, -0.9215,  0.2213,  ...,  0.1227, -0.0837,  0.5296]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 7, 1024])
tensor([[[-3.4683e-01, -1.1691e+00,  3.4153e-01,  ..., -9.1641e-01,
           3.5167e-01, -5.1905e-01],
         [-7.7225e-02, -1.3008e+00,  3.8095e-01,  ..., -3.3792e-02,
          -5.8923e-02, -4.5900e-01],
         [ 4.8570e-02, -2.0363e+00,  2.2665e-01,  ...,  9.8172e-02,
           1.1534e-02, -2.3062e-01],
         ...,
         [-3.5349e-01, -6.8725e-01, -4.8122e-01,  ..., -9.3709e-02,
           6.9407e-01, -2.6829e-04],
         [ 4.6834e-01, -1.0965e+00,  1.8834e-02,  ...,  1.1872e-01,
           5.3497e-01, -3.3552e-01],
         [-4.3652e-01,  7.6258e-01,  4.3609e-01,  ..., -4.8140e-02,
           3.0880e-01,  2.0488e-03]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 20, 1024])
tensor([[[-2.8885e-02, -1.1643e+00,  2.5118e-01,  ..., -1.8878e-01,
          -1.4726e-01, -3.2713e-01],
         [ 2.0990e-01, -1.0637e+00, -4.8886e-01,  ..., -3.7565e-01,
           7.8226e-01,  3.4231e-01],
         [-7.8934e-02, -1.1241e+00, -7.0090e-01,  ..., -1.2027e-01,
           9.6947e-01,  4.3048e-03],
         ...,
         [-7.3888e-01, -2.4357e+00,  3.2359e-01,  ...,  3.7973e-01,
           5.2578e-02,  6.9633e-01],
         [ 2.2696e-03, -2.5099e+00,  1.8518e-01,  ..., -9.4540e-03,
           6.5282e-01,  1.4676e-01],
         [-1.8755e-02, -5.7892e-01,  2.7142e-01,  ...,  2.8963e-01,
          -1.2168e-01,  7.3768e-01]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 7, 1024])
tensor([[[-0.3613, -1.8943,  0.2568,  ..., -0.0920, -0.2209,  0.3037],
         [ 0.1794, -2.0645,  0.6150,  ..., -0.3740,  0.7576, -0.0244],
         [-0.4822, -1.2497, -0.1837,  ..., -0.3379,  0.4522,  0.2143],
         ...,
         [-0.0485, -1.1103,  0.6029,  ..., -0.1409,  0.1174, -0.6387],
         [ 0.1085, -2.5344, -0.0467,  ..., -0.0306,  0.5858,  0.3356],
         [-0.1482, -1.9981,  0.9548,  ..., -0.6159,  0.0790,  0.0554]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 7, 1024])
tensor([[[ 0.5897, -1.9653,  0.7784,  ...,  0.1854, -0.0401,  0.2520],
         [-0.0243, -0.0907,  0.6919,  ...,  0.2554, -0.0164,  0.0886],
         [ 0.2764, -1.6380,  0.1311,  ...,  0.0212,  0.5673,  0.1582],
         ...,
         [-0.1031, -1.3048,  0.4162,  ..., -0.2360,  0.5192,  0.7953],
         [ 0.4108, -1.5616,  0.2931,  ...,  0.3180,  0.4531, -0.4070],
         [ 0.0865, -1.5271,  0.3737,  ..., -0.2159,  0.2410,  0.4630]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 13, 1024])
tensor([[[ 0.1570, -2.3306,  0.0805,  ..., -0.0371, -0.0121,  0.0544],
         [ 0.0124, -2.7444,  0.8629,  ..., -0.4343,  0.5191, -0.0721],
         [ 0.3161, -2.8065,  0.6831,  ..., -0.1132,  0.3639,  0.1044],
         ...,
         [-0.0877, -2.3128,  0.3364,  ..., -0.6510, -0.0697, -0.1097],
         [ 0.1476, -1.6514,  0.5124,  ..., -0.2377,  0.1226,  0.1186],
         [ 0.4828, -1.1680,  0.5649,  ...,  0.0040, -0.0622,  0.0838]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 2, 1024])
tensor([[[ 0.1152, -2.1578,  0.7206,  ..., -0.0163,  0.0130, -0.3653],
         [ 0.1984, -1.9528,  0.1213,  ...,  0.3945,  0.4357,  0.3821]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 46, 1024])
tensor([[[ 0.0131, -1.3289,  0.2075,  ..., -0.6574, -0.3104, -0.3460],
         [ 0.0192, -2.4567, -0.0493,  ..., -0.2956,  0.2600,  0.2077],
         [ 0.4651, -1.4305, -0.0215,  ..., -0.5604,  0.1486,  0.0202],
         ...,
         [ 0.0498, -1.4580, -0.1670,  ...,  0.5315,  0.0762,  0.2792],
         [-0.1472, -0.9276,  0.3293,  ...,  0.3845,  0.3541,  0.4089],
         [ 0.1794, -1.0177,  0.4359,  ...,  0.1339, -0.4943,  0.2510]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 11, 1024])
tensor([[[ 0.2842, -1.1276,  0.8959,  ...,  0.1371,  0.4510,  0.0730],
         [-0.3982, -1.5855, -0.0882,  ...,  0.1215,  0.0527,  0.3065],
         [ 0.3932, -1.8507,  0.5594,  ..., -0.1793,  0.4955,  0.3967],
         ...,
         [-0.2321, -2.0215, -0.1597,  ...,  0.2427,  0.0441,  0.5271],
         [-0.3932,  0.5938,  0.1109,  ..., -0.0603, -0.0629, -0.2200],
         [-0.5846, -0.0701,  0.4732,  ...,  0.3039,  0.3519, -0.0333]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 64, 1024])
tensor([[[ 0.3210, -0.9300,  0.3491,  ...,  0.3710,  0.0278, -0.1905],
         [-0.3260, -1.5501,  0.1162,  ..., -0.2409, -0.0913, -0.2502],
         [-0.0519, -0.9645,  0.8801,  ...,  0.6517,  0.4665,  0.5377],
         ...,
         [ 0.2360, -1.3547,  0.2208,  ...,  0.1329,  0.0434,  0.0890],
         [-0.6806, -0.4211, -0.2531,  ...,  0.1653,  0.1267,  0.2110],
         [ 0.1340, -1.5731,  0.1783,  ...,  0.1076, -0.0054,  0.1853]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 50, 1024])
tensor([[[ 0.2996, -1.0870,  0.1461,  ..., -0.5197,  0.1421, -0.3144],
         [ 0.2105, -0.7949,  0.2688,  ..., -0.5043,  0.7079, -0.1873],
         [ 0.1885, -1.4989, -0.2747,  ..., -0.8179,  0.6768,  0.4052],
         ...,
         [ 0.1824, -0.3288,  0.3266,  ...,  0.3708,  0.2026,  0.1290],
         [ 0.4565, -1.5699,  0.3165,  ...,  0.3727, -0.1731,  0.5468],
         [ 0.3984, -0.7333,  0.3437,  ...,  0.3259, -0.0292,  0.1858]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 10, 1024])
tensor([[[ 0.1011, -2.1352,  0.7513,  ..., -0.1908,  0.1919, -0.3843],
         [ 0.4893, -1.6462,  0.7498,  ..., -0.2760,  0.5449,  0.1769],
         [ 0.2324, -1.4336,  0.3816,  ..., -0.3071,  0.7266,  0.2310],
         ...,
         [-0.1522, -1.3587,  0.5451,  ..., -0.4184,  0.2722,  0.2172],
         [ 0.1378, -1.5215, -0.3149,  ..., -0.5866,  0.8588,  0.4683],
         [-0.2976, -1.4904,  0.8843,  ...,  0.0603,  0.3492, -0.2219]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 32, 1024])
tensor([[[ 0.1179, -1.6986,  0.3139,  ..., -0.5138, -0.1713, -0.6268],
         [ 0.1446, -0.3884,  0.0092,  ..., -0.6975, -0.0862, -0.2458],
         [ 0.1248, -1.2379, -0.5616,  ..., -0.8120,  0.7159,  0.1789],
         ...,
         [-0.2050, -2.1883,  0.3811,  ...,  0.1356,  0.0643,  0.0602],
         [-0.4584, -2.5825, -0.0385,  ..., -0.0454,  0.4322, -0.1749],
         [ 0.0355, -1.8945,  0.8317,  ..., -0.1637,  0.0263, -0.3882]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 10, 1024])
tensor([[[-1.8082e-01, -2.5556e+00,  3.8693e-01,  ..., -7.5517e-01,
          -5.8214e-01, -4.8216e-01],
         [-3.3433e-01, -1.8816e+00,  8.5329e-02,  ...,  2.4310e-03,
           8.7610e-01,  3.2470e-01],
         [-2.5343e-01, -4.2310e-01, -6.6291e-01,  ...,  1.2018e-01,
           6.5244e-01,  7.9918e-01],
         ...,
         [ 7.2905e-02, -1.7383e+00, -5.2864e-02,  ..., -2.8325e-01,
          -8.4001e-02,  2.9936e-01],
         [ 1.3120e-01, -1.6680e+00,  1.7499e-01,  ..., -7.8333e-02,
           8.0836e-02,  4.0399e-01],
         [ 2.2295e-01, -2.4425e+00,  9.2124e-01,  ..., -4.7221e-01,
          -1.7383e-01, -3.4514e-01]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 20, 1024])
tensor([[[-0.2376, -2.1615,  0.8058,  ..., -0.1774,  0.0521, -0.3776],
         [-0.4480, -1.3406,  0.0504,  ...,  0.3030,  0.5703, -0.0605],
         [-0.3317, -0.4884,  0.3593,  ..., -0.0511,  0.3065,  0.3242],
         ...,
         [ 0.2298, -2.0301, -0.6348,  ..., -0.3571,  0.5478,  0.5916],
         [-0.2746, -0.7359,  0.2895,  ..., -0.5714,  0.5635, -0.2884],
         [ 0.1728, -1.2194,  0.6122,  ...,  0.0724, -0.0058,  0.0210]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 19, 1024])
tensor([[[-1.0710e-01, -7.2662e-01,  3.0137e-01,  ..., -5.7524e-01,
           1.8316e-01, -1.8780e-02],
         [ 5.1845e-01, -1.3316e+00,  5.3609e-01,  ..., -5.4926e-01,
           2.6735e-01, -2.6129e-01],
         [-2.2414e-01, -2.8273e+00,  2.7715e-01,  ..., -2.8065e-01,
          -1.9189e-01, -3.6363e-01],
         ...,
         [-3.9424e-01, -2.3007e+00,  7.5597e-01,  ..., -3.6496e-01,
          -1.3172e-01,  6.5113e-02],
         [-3.9154e-01, -1.7698e+00, -7.4905e-04,  ..., -3.5547e-01,
           2.4018e-01, -6.4940e-02],
         [-3.5741e-02, -1.3988e+00,  6.1945e-01,  ..., -2.7175e-01,
           3.2418e-01,  8.2559e-02]]], device='cuda:0',
       grad_fn=<UnsqueezeBackward0>)
torch.Size([1, 10, 1024])
tensor([[[ 0.2421, -0.7726,  0.8548,  ..., -0.4282, -0.1925,  0.0889],
         [-0.3432, -1.9000, -0.0839,  ..., -0.2801, -0.1419,  0.2222],
         [ 0.3805, -0.1869,  0.0564,  ..., -0.4762,  0.9538,  0.5673],
         ...,
         [-0.3915, -0.6402, -0.3113,  ...,  0.1233,  0.6611,  0.4365],
         [-0.3660, -0.2737,  0.6878,  ...,  0.0473,  0.5454, -0.1564],
         [ 0.0707, -0.9215,  0.2952,  ..., -0.2013,  0.2442,  0.6315]]],
       device='cuda:0', grad_fn=<UnsqueezeBackward0>)
[tensor([[-1.7979]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.8848]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.3350]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.1807]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.5615]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7910]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-2.0605]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.1689]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.6709]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7881]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-0.9146]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.2354]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.4785]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.6201]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.4199]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7109]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.1816]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.3721]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.1494]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.3730]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.4434]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.6387]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7637]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.3018]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.5947]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7148]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.2959]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.2080]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.4482]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.7959]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.6963]], device='cuda:0', dtype=torch.float16,
       grad_fn=<AddmmBackward0>), tensor([[-1.4531]], device='cuda:0', dtype=torch.float16,
Traceback (most recent call last):                                                                               | 0/111421 [00:00<?, ?it/s]
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/train.py", line 23, in <module>
    main('pairwise_trainer.json', CFG)
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/train.py", line 18, in main
    getattr(train_loop, cfg.loop)(cfg)
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/trainer/train_loop.py", line 34, in train_loop
    train_loss = train_input.train_fn(
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/trainer/trainer.py", line 279, in train_fn
    scaler.scale(loss).backward(retain_graph=True)
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/_tensor.py", line 487, in backward
    torch.autograd.backward(
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/autograd/__init__.py", line 200, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: Function 'AddmmBackward0' returned nan values in its 0th output.