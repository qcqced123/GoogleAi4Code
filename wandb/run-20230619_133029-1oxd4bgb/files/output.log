Some weights of the model checkpoint at microsoft/deberta-v3-large were not used when initializing DebertaV2Model: ['lm_predictions.lm_head.bias', 'mask_predictions.classifier.bias', 'mask_predictions.LayerNorm.bias', 'mask_predictions.dense.bias', 'mask_predictions.LayerNorm.weight', 'lm_predictions.lm_head.dense.weight', 'lm_predictions.lm_head.LayerNorm.weight', 'mask_predictions.dense.weight', 'mask_predictions.classifier.weight', 'lm_predictions.lm_head.LayerNorm.bias', 'lm_predictions.lm_head.dense.bias']
- This IS expected if you are initializing DebertaV2Model from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing DebertaV2Model from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|                                                                                                                | 0/73 [00:00<?, ?it/s]
Traceback (most recent call last):                                                                                   | 0/73 [00:00<?, ?it/s]
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/train.py", line 22, in <module>
    main('dictionarywise_trainer.json', CFG)
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/train.py", line 18, in main
    getattr(train_loop, cfg.loop)(cfg)
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/trainer/train_loop.py", line 34, in train_loop
    train_loss = train_input.train_fn(
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/trainer/trainer.py", line 116, in train_fn
    loss = criterion(cell_features, ranks)
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/qcqced/바탕화면/ML_Test/GoogleAi4Code/model/metric_learning.py", line 80, in forward
    similarity_scores = zero_filtering(self.similarity_fct(embeddings_a, embeddings_b)) * self.scale
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/sentence_transformers/util.py", line 48, in cos_sim
    b_norm = torch.nn.functional.normalize(b, p=2, dim=1)
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/nn/functional.py", line 4660, in normalize
    denom = input.norm(p, dim, keepdim=True).clamp_min(eps).expand_as(input)
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/_tensor.py", line 647, in norm
    return torch.norm(self, p, dim, keepdim, dtype=dtype)
  File "/home/qcqced/anaconda3/lib/python3.9/site-packages/torch/functional.py", line 1517, in norm
    return torch.linalg.vector_norm(input, _p, _dim, keepdim, dtype=dtype)
RuntimeError: linalg.vector_norm: Expected a floating point or complex tensor as input. Got Long